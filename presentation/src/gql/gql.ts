/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment CountryFragment on Country {\n    id\n    name\n  }\n": types.CountryFragmentFragmentDoc,
    "\n    mutation acceptHiringInvitationMutation($input: AcceptHiringInvitation!) {\n        acceptHiringInvitation(input: $input){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n        }\n    }": types.AcceptHiringInvitationMutationDocument,
    "\n    mutation addFeedbackCommentMutation($input: AddFeedbackComment!){\n        addFeedbackComment(input:$input){\n            id\n        }\n    }": types.AddFeedbackCommentMutationDocument,
    "\n    mutation addFeedbackReplyMutation($input: AddFeedbackReply!){\n        addFeedbackReply(input: $input){\n            id\n        }\n    }": types.AddFeedbackReplyMutationDocument,
    "\n    mutation cancelHiringProcessMutation($input: CancelHiringProcess!){\n        cancelHiringProcess(input: $input){\n            id\n        }\n    }": types.CancelHiringProcessMutationDocument,
    "\n    mutation changeEnterpriseAddressMutation($input: ChangeEnterpriseAddress!){\n        changeEnterpriseAddress(input: $input){\n            id\n        }\n    }": types.ChangeEnterpriseAddressMutationDocument,
    "\n    mutation changeEnterpriseBannerMutation($enterpriseId:String!, $file: Upload!){\n        changeEnterpriseBannerImg(enterpriseId: $enterpriseId, file: $file){\n            id\n        }\n    }": types.ChangeEnterpriseBannerMutationDocument,
    "\n    mutation changeEnterpriseEmailMutation($input: ChangeEnterpriseEmail!){\n        changeEnterpriseEmail(input:$input){\n            id\n        }\n    }": types.ChangeEnterpriseEmailMutationDocument,
    "\n    mutation changeEnterpriseLogoMutation($enterpriseId:String!, $file: Upload!){\n        changeEnterpriseLogoImg(enterpriseId: $enterpriseId, file: $file){\n            id\n        }\n    }": types.ChangeEnterpriseLogoMutationDocument,
    "\n    mutation changeEnterprisePhoneMutation($input: ChangeEnterprisePhone!){\n        changeEnterprisePhone(input: $input){\n            id\n        }\n    }": types.ChangeEnterprisePhoneMutationDocument,
    "\n    mutation changeEnterpriseWebsiteMutation($input: ChangeEnterpriseWebsite!){\n        changeEnterpriseWebsite(input: $input){\n            id\n        }\n    }": types.ChangeEnterpriseWebsiteMutationDocument,
    "\n    mutation changeUserGenreMutation($input:ChangeUserGenre!){\n        changeUserGenre(input: $input){\n            id\n        }\n    }": types.ChangeUserGenreMutationDocument,
    "\n    mutation changeUserPhoneMutation($input: ChangeUserPhone!){\n        changeUserPhone(input:$input){\n            id\n        }\n    }": types.ChangeUserPhoneMutationDocument,
    "\n    mutation changeUserPronounMutation($input: ChangeUserPronoun!) {\n        changeUserPronoun(input: $input) {\n            id\n        }\n    }": types.ChangeUserPronounMutationDocument,
    "\n    mutation createEnterpriseChatMutation($input: CreateEnterpriseChat!){\n        createEnterpriseChat(input: $input){\n            id\n            enterpriseId\n            recipientOne {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            recipientTwo {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            replies {\n                id\n                chatId\n                sender {\n                    id\n                    subjectName\n                    subjectThumbnail\n                    subjectEmail\n                }\n                content\n                createdAt\n                updatedAt\n                seen\n            }\n        }\n    }": types.CreateEnterpriseChatMutationDocument,
    "\n    mutation createEnterprise($input: CreateEnterprise!){\n        createEnterprise(input: $input){\n            name\n        }\n    }": types.CreateEnterpriseDocument,
    "\n    mutation createFeedbackMutation($input: CreateFeedback) {\n        createFeedback(input: $input){\n            id\n            complaintId\n            enterpriseId\n            replyReview {\n                id\n                feedbackId\n                reviewer {\n                    id\n                    userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                    }\n                    status\n                }\n                replies {\n                    id\n                    complaintId\n                    sender {\n                        id\n                        subjectName\n                        subjectThumbnail\n                        subjectEmail\n                    }\n                    body\n                    createdAt\n                    read\n                    readAt\n                    updatedAt\n                    isEnterprise\n                    enterpriseId\n                }\n                review {\n                    id\n                    comment\n                }\n                color\n                createdAt\n            }\n            reviewedAt\n            updatedAt\n            isDone\n        }\n    }\n    ": types.CreateFeedbackMutationDocument,
    "\n    mutation createNewComplaintMutation($input: CreateNewComplaint!){\n        createNewComplaint(input:$input){\n            id\n        }\n    }": types.CreateNewComplaintMutationDocument,
    "\n    mutation CreateUserMutation(\n        $input: CreateUser!){\n            createUser(\n                input: $input\n            ){\n                userName\n            }\n    }": types.CreateUserMutationDocument,
    "\n    mutation describeComplaintMutation($input:DescribeComplaint!){\n        describeComplaint(input:$input){\n            id\n            receiver{\n                id\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                }\n                body\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    ": types.DescribeComplaintMutationDocument,
    "\n  mutation endFeedbackMutation($input: EndFeedback!) {\n    endFeedback(input: $input) {\n      id\n    }\n  }\n": types.EndFeedbackMutationDocument,
    "\n    mutation fireEmployeeMutation($input: FireEmployee!){\n        fireEmployee(input: $input){\n            id\n        }\n    }": types.FireEmployeeMutationDocument,
    "\n    mutation hireEmployeeMutation($input: HireEmployee!) {\n        hireEmployee(input: $input){\n            id\n        }\n    }": types.HireEmployeeMutationDocument,
    "\n    mutation inviteToProjectMutation($input: InviteToProject!){\n        inviteToProject(input: $input){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n        }\n    }": types.InviteToProjectMutationDocument,
    "\n    mutation markNotificationAsReadMutation($id:String!){\n        markNotificationAsRead(id:$id){\n            id\n        }\n    }\n    ": types.MarkNotificationAsReadMutationDocument,
    "\n    mutation promoteEmployeeMutation($input: PromoteEmployee!){\n        promoteEmployee(input: $input){\n            id\n            enterprisePosition\n        }\n    }": types.PromoteEmployeeMutationDocument,
    "\nmutation rateComplaintMutation($input: RateComplaint!){\n    rateComplaint(input: $input){\n            id\n            rate\n            comment\n            sentToReviewBy{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            ratedBy{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            createdAt\n            lastUpdate  \n    }\n}": types.RateComplaintMutationDocument,
    "\n    mutation rejectHiringInvitationMutation($input: RejectHiringInvitation!) {\n       rejectHiringInvitation(input: $input){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n        }\n    }": types.RejectHiringInvitationMutationDocument,
    "\n    mutation removeFeedbackCommentMutation($input: RemoveFeedbackComment!){\n        removeFeedbackCommand(input: $input){\n            id\n        }\n    }": types.RemoveFeedbackCommentMutationDocument,
    "\n    mutation removeFeedbackReplyMutation($input:RemoveFeedbackReply!){\n        removeFeedbackReply(input: $input) {\n            id\n        }\n    }": types.RemoveFeedbackReplyMutationDocument,
    "\n    mutation sendComplaintMutation($input: SendComplaint!) {\n        sendComplaint(input:$input){\n            id\n            receiver{\n                id\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                }\n                body\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }": types.SendComplaintMutationDocument,
    "\n    mutation updateFirstNameMutation($input: ChangeUserFirstName!) {\n        changeFirstName(input: $input){\n            id\n        }\n    }": types.UpdateFirstNameMutationDocument,
    "\n    mutation updateLastNameMutation($input: ChangeUserLastName!){\n        changeLastName(input: $input){\n            id\n        }\n    }": types.UpdateLastNameMutationDocument,
    "\n    mutation updatePasswordMutation($input: ChangePassword!){\n        changePassword(input: $input){\n            id\n        }\n    }": types.UpdatePasswordMutationDocument,
    "\n    mutation updateProfileImageMutation($id:String!,$file: Upload!) {\n        updateProfileImg(id:$id,file: $file) {\n            id\n        }\n    }": types.UpdateProfileImageMutationDocument,
    "\n    mutation updateUserAddressMutation($input: UpdateUserAddress!){\n        updateUserAddress(input: $input){\n            id\n        }\n    }": types.UpdateUserAddressMutationDocument,
    "\n    query CitiesQuery($id: Int!){\n        cities(id:$id){\n            id\n            name\n            countryCode\n            latitude\n            longitude\n        }\n    }": types.CitiesQueryDocument,
    "\n    query ComplaintByIdQuery($id: String!){\n        complaintById(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                    isOnline\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n                isEnterprise\n                enterpriseId\n            }\n        }\n    }": types.ComplaintByIdQueryDocument,
    "\n    query complaintsByAuthorIdOrReceiverIdQuery($id: String!){\n        complaintsByAuthorOrReceiverId(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                }\n                body\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }": types.ComplaintsByAuthorIdOrReceiverIdQueryDocument,
    "query complaintsForFeedbackByEmployeeIdQuery($id: String!){\n        complaintsForFeedbackByEmployeeId(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }": types.ComplaintsForFeedbackByEmployeeIdQueryDocument,
    "query complaintsOfResolvedFeedbackByEmployeeId($id: String!){\n        complaintsOfResolvedFeedbackByEmployeeId(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }": types.ComplaintsOfResolvedFeedbackByEmployeeIdDocument,
    "\n    query complaintsRatedByAuthorIdQuery($id:String!, $term:String){\n        complaintsRatedByAuthorId(id:$id, term: $term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    ": types.ComplaintsRatedByAuthorIdQueryDocument,
    "\n    query complaintsRatedByReceiverIdQuery($id:String!, $term: String){\n        complaintsRatedByReceiverId(id:$id, term: $term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    ": types.ComplaintsRatedByReceiverIdQueryDocument,
    "\n    query complaintsSentForReviewByReceiverIdQuery($id:String!, $term: String){\n        complaintsSentForReviewByReceiverId(id:$id, term: $term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    ": types.ComplaintsSentForReviewByReceiverIdQueryDocument,
    "\n    query Countries{\n        countries{\n            id\n            name\n            phoneCode\n        }\n    }": types.CountriesDocument,
    "\n    query CountryStatesQuery($id: Int!){\n        countryStates(id: $id) {\n            id\n            name\n        }\n    }": types.CountryStatesQueryDocument,
    "\n    query enterpriseByNameQuery($name: String!){\n        enterpriseByName(name:$name){\n            id\n            name\n            logoImg\n            bannerImg\n            website\n            email\n            phoneNumber\n            address {\n                country\n                countryState\n                city\n                }\n            industry {\n                id\n                name\n            }\n            foundationDate\n            ownerId\n            employees {\n                id\n                enterpriseId\n                userId\n                user{\n                    id\n                    userName\n                    person{\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address{\n                            country\n                            countryState\n                            city\n                        }\n                    }\n                    status\n                }\n                hiringDate\n                approvedHiring\n                approvedHiringAt\n                enterprisePosition\n            }\n        }\n    }": types.EnterpriseByNameQueryDocument,
    "\nquery EnterprisesByAuthenticatedUserQuery{\n    enterprisesByAuthenticatedUser{\n        enterprises{\n            authority{\n            authority\n            enterpriseId\n            principal\n        }\n        enterprise{\n            name\n            logoImg\n            bannerImg\n            website\n            email\n            phoneNumber\n            address {\n                country\n                countryState\n                city\n                }\n            industry {\n                id\n                name\n            }\n            foundationDate\n            ownerId\n        }\n        }\n        offices{\n            authority{\n            authority\n            enterpriseId\n            principal\n        }\n        enterprise{\n            name\n            logoImg\n            bannerImg\n            website\n            email\n            phoneNumber\n            address {\n                country\n                countryState\n                city\n                }\n            industry {\n                id\n                name\n            }\n            foundationDate\n            ownerId\n        }\n        }\n    }\n}\n": types.EnterprisesByAuthenticatedUserQueryDocument,
    "\n    query findEnterpriseChatQuery($input: FindEnterpriseChat!){\n        findEnterpriseChat(input: $input){\n            id\n            enterpriseId\n            recipientOne {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            recipientTwo {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            replies {\n                id\n                chatId\n                sender {\n                    id\n                    subjectName\n                    subjectThumbnail\n                    subjectEmail\n                }\n                content\n                createdAt\n                updatedAt\n                seen\n            }\n        }\n    }": types.FindEnterpriseChatQueryDocument,
    "\n    query hiringProcessByAuthenticatedUserQuery{\n        hiringProcessByAuthenticatedUser{\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            industry {\n                id\n                name\n            }\n        }\n    }": types.HiringProcessByAuthenticatedUserQueryDocument,
    "\n    query hiringProcessByEnterpriseName($name: String!) {\n        hiringProcessByEnterpriseName(name:$name){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            industry {\n                id\n                name\n            }\n        }\n    }": types.HiringProcessByEnterpriseNameDocument,
    "query industries{\n        industries{\n            id\n            name\n        }\n    }": types.IndustriesDocument,
    "\n    query pendingReviewsByAuthorId($id:String!, $term: String){\n        pendingReviewsByAuthorId(id:$id,term:$term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }": types.PendingReviewsByAuthorIdDocument,
    "\n    query recipientsByNameLikeQuery($term:String!){\n        recipientsByNameLike(term:$term){\n            id\n            subjectName\n            subjectThumbnail\n            isEnterprise\n        }\n    }\n": types.RecipientsByNameLikeQueryDocument,
    "\n    query User($id:String!){\n        userById(id:$id){\n                userName\n                person {\n                    profileImg\n                    email\n                    firstName\n                    lastName\n                    genre\n                    pronoun\n                    age\n                    phoneNumber\n                    address { \n                        country\n                        countryState\n                        city\n                        }\n                }\n                status\n        }\n    }": types.UserDocument,
    "\n    query UserDescriptor{\n        userDescriptor{\n            id\n            userName\n            fullName\n            profileImg\n            genre\n            pronoun\n            authorities{\n                enterpriseId\n                principal\n                authority\n            }\n        }\n    }": types.UserDescriptorDocument,
    "\n    query usersForHiringQuery($input: SearchWithPagination!) {\n        usersForHiring(input:$input){\n            users {\n                id\n                userName\n                person {\n                    profileImg\n                    email\n                    firstName\n                    lastName\n                    genre\n                    pronoun\n                    age\n                    phoneNumber\n                    address { country countryState city}\n                }\n                status\n            }\n            count\n            limit\n            offset\n            nextCursor\n            prevCursor\n        }\n    }": types.UsersForHiringQueryDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CountryFragment on Country {\n    id\n    name\n  }\n"): (typeof documents)["\n  fragment CountryFragment on Country {\n    id\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation acceptHiringInvitationMutation($input: AcceptHiringInvitation!) {\n        acceptHiringInvitation(input: $input){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n        }\n    }"): (typeof documents)["\n    mutation acceptHiringInvitationMutation($input: AcceptHiringInvitation!) {\n        acceptHiringInvitation(input: $input){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addFeedbackCommentMutation($input: AddFeedbackComment!){\n        addFeedbackComment(input:$input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation addFeedbackCommentMutation($input: AddFeedbackComment!){\n        addFeedbackComment(input:$input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation addFeedbackReplyMutation($input: AddFeedbackReply!){\n        addFeedbackReply(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation addFeedbackReplyMutation($input: AddFeedbackReply!){\n        addFeedbackReply(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation cancelHiringProcessMutation($input: CancelHiringProcess!){\n        cancelHiringProcess(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation cancelHiringProcessMutation($input: CancelHiringProcess!){\n        cancelHiringProcess(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation changeEnterpriseAddressMutation($input: ChangeEnterpriseAddress!){\n        changeEnterpriseAddress(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation changeEnterpriseAddressMutation($input: ChangeEnterpriseAddress!){\n        changeEnterpriseAddress(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation changeEnterpriseBannerMutation($enterpriseId:String!, $file: Upload!){\n        changeEnterpriseBannerImg(enterpriseId: $enterpriseId, file: $file){\n            id\n        }\n    }"): (typeof documents)["\n    mutation changeEnterpriseBannerMutation($enterpriseId:String!, $file: Upload!){\n        changeEnterpriseBannerImg(enterpriseId: $enterpriseId, file: $file){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation changeEnterpriseEmailMutation($input: ChangeEnterpriseEmail!){\n        changeEnterpriseEmail(input:$input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation changeEnterpriseEmailMutation($input: ChangeEnterpriseEmail!){\n        changeEnterpriseEmail(input:$input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation changeEnterpriseLogoMutation($enterpriseId:String!, $file: Upload!){\n        changeEnterpriseLogoImg(enterpriseId: $enterpriseId, file: $file){\n            id\n        }\n    }"): (typeof documents)["\n    mutation changeEnterpriseLogoMutation($enterpriseId:String!, $file: Upload!){\n        changeEnterpriseLogoImg(enterpriseId: $enterpriseId, file: $file){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation changeEnterprisePhoneMutation($input: ChangeEnterprisePhone!){\n        changeEnterprisePhone(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation changeEnterprisePhoneMutation($input: ChangeEnterprisePhone!){\n        changeEnterprisePhone(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation changeEnterpriseWebsiteMutation($input: ChangeEnterpriseWebsite!){\n        changeEnterpriseWebsite(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation changeEnterpriseWebsiteMutation($input: ChangeEnterpriseWebsite!){\n        changeEnterpriseWebsite(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation changeUserGenreMutation($input:ChangeUserGenre!){\n        changeUserGenre(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation changeUserGenreMutation($input:ChangeUserGenre!){\n        changeUserGenre(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation changeUserPhoneMutation($input: ChangeUserPhone!){\n        changeUserPhone(input:$input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation changeUserPhoneMutation($input: ChangeUserPhone!){\n        changeUserPhone(input:$input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation changeUserPronounMutation($input: ChangeUserPronoun!) {\n        changeUserPronoun(input: $input) {\n            id\n        }\n    }"): (typeof documents)["\n    mutation changeUserPronounMutation($input: ChangeUserPronoun!) {\n        changeUserPronoun(input: $input) {\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createEnterpriseChatMutation($input: CreateEnterpriseChat!){\n        createEnterpriseChat(input: $input){\n            id\n            enterpriseId\n            recipientOne {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            recipientTwo {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            replies {\n                id\n                chatId\n                sender {\n                    id\n                    subjectName\n                    subjectThumbnail\n                    subjectEmail\n                }\n                content\n                createdAt\n                updatedAt\n                seen\n            }\n        }\n    }"): (typeof documents)["\n    mutation createEnterpriseChatMutation($input: CreateEnterpriseChat!){\n        createEnterpriseChat(input: $input){\n            id\n            enterpriseId\n            recipientOne {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            recipientTwo {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            replies {\n                id\n                chatId\n                sender {\n                    id\n                    subjectName\n                    subjectThumbnail\n                    subjectEmail\n                }\n                content\n                createdAt\n                updatedAt\n                seen\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createEnterprise($input: CreateEnterprise!){\n        createEnterprise(input: $input){\n            name\n        }\n    }"): (typeof documents)["\n    mutation createEnterprise($input: CreateEnterprise!){\n        createEnterprise(input: $input){\n            name\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createFeedbackMutation($input: CreateFeedback) {\n        createFeedback(input: $input){\n            id\n            complaintId\n            enterpriseId\n            replyReview {\n                id\n                feedbackId\n                reviewer {\n                    id\n                    userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                    }\n                    status\n                }\n                replies {\n                    id\n                    complaintId\n                    sender {\n                        id\n                        subjectName\n                        subjectThumbnail\n                        subjectEmail\n                    }\n                    body\n                    createdAt\n                    read\n                    readAt\n                    updatedAt\n                    isEnterprise\n                    enterpriseId\n                }\n                review {\n                    id\n                    comment\n                }\n                color\n                createdAt\n            }\n            reviewedAt\n            updatedAt\n            isDone\n        }\n    }\n    "): (typeof documents)["\n    mutation createFeedbackMutation($input: CreateFeedback) {\n        createFeedback(input: $input){\n            id\n            complaintId\n            enterpriseId\n            replyReview {\n                id\n                feedbackId\n                reviewer {\n                    id\n                    userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                    }\n                    status\n                }\n                replies {\n                    id\n                    complaintId\n                    sender {\n                        id\n                        subjectName\n                        subjectThumbnail\n                        subjectEmail\n                    }\n                    body\n                    createdAt\n                    read\n                    readAt\n                    updatedAt\n                    isEnterprise\n                    enterpriseId\n                }\n                review {\n                    id\n                    comment\n                }\n                color\n                createdAt\n            }\n            reviewedAt\n            updatedAt\n            isDone\n        }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation createNewComplaintMutation($input: CreateNewComplaint!){\n        createNewComplaint(input:$input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation createNewComplaintMutation($input: CreateNewComplaint!){\n        createNewComplaint(input:$input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateUserMutation(\n        $input: CreateUser!){\n            createUser(\n                input: $input\n            ){\n                userName\n            }\n    }"): (typeof documents)["\n    mutation CreateUserMutation(\n        $input: CreateUser!){\n            createUser(\n                input: $input\n            ){\n                userName\n            }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation describeComplaintMutation($input:DescribeComplaint!){\n        describeComplaint(input:$input){\n            id\n            receiver{\n                id\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                }\n                body\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    "): (typeof documents)["\n    mutation describeComplaintMutation($input:DescribeComplaint!){\n        describeComplaint(input:$input){\n            id\n            receiver{\n                id\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                }\n                body\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation endFeedbackMutation($input: EndFeedback!) {\n    endFeedback(input: $input) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation endFeedbackMutation($input: EndFeedback!) {\n    endFeedback(input: $input) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation fireEmployeeMutation($input: FireEmployee!){\n        fireEmployee(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation fireEmployeeMutation($input: FireEmployee!){\n        fireEmployee(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation hireEmployeeMutation($input: HireEmployee!) {\n        hireEmployee(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation hireEmployeeMutation($input: HireEmployee!) {\n        hireEmployee(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation inviteToProjectMutation($input: InviteToProject!){\n        inviteToProject(input: $input){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n        }\n    }"): (typeof documents)["\n    mutation inviteToProjectMutation($input: InviteToProject!){\n        inviteToProject(input: $input){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation markNotificationAsReadMutation($id:String!){\n        markNotificationAsRead(id:$id){\n            id\n        }\n    }\n    "): (typeof documents)["\n    mutation markNotificationAsReadMutation($id:String!){\n        markNotificationAsRead(id:$id){\n            id\n        }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation promoteEmployeeMutation($input: PromoteEmployee!){\n        promoteEmployee(input: $input){\n            id\n            enterprisePosition\n        }\n    }"): (typeof documents)["\n    mutation promoteEmployeeMutation($input: PromoteEmployee!){\n        promoteEmployee(input: $input){\n            id\n            enterprisePosition\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nmutation rateComplaintMutation($input: RateComplaint!){\n    rateComplaint(input: $input){\n            id\n            rate\n            comment\n            sentToReviewBy{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            ratedBy{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            createdAt\n            lastUpdate  \n    }\n}"): (typeof documents)["\nmutation rateComplaintMutation($input: RateComplaint!){\n    rateComplaint(input: $input){\n            id\n            rate\n            comment\n            sentToReviewBy{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            ratedBy{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            createdAt\n            lastUpdate  \n    }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation rejectHiringInvitationMutation($input: RejectHiringInvitation!) {\n       rejectHiringInvitation(input: $input){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n        }\n    }"): (typeof documents)["\n    mutation rejectHiringInvitationMutation($input: RejectHiringInvitation!) {\n       rejectHiringInvitation(input: $input){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation removeFeedbackCommentMutation($input: RemoveFeedbackComment!){\n        removeFeedbackCommand(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation removeFeedbackCommentMutation($input: RemoveFeedbackComment!){\n        removeFeedbackCommand(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation removeFeedbackReplyMutation($input:RemoveFeedbackReply!){\n        removeFeedbackReply(input: $input) {\n            id\n        }\n    }"): (typeof documents)["\n    mutation removeFeedbackReplyMutation($input:RemoveFeedbackReply!){\n        removeFeedbackReply(input: $input) {\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation sendComplaintMutation($input: SendComplaint!) {\n        sendComplaint(input:$input){\n            id\n            receiver{\n                id\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                }\n                body\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }"): (typeof documents)["\n    mutation sendComplaintMutation($input: SendComplaint!) {\n        sendComplaint(input:$input){\n            id\n            receiver{\n                id\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                }\n                body\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateFirstNameMutation($input: ChangeUserFirstName!) {\n        changeFirstName(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation updateFirstNameMutation($input: ChangeUserFirstName!) {\n        changeFirstName(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateLastNameMutation($input: ChangeUserLastName!){\n        changeLastName(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation updateLastNameMutation($input: ChangeUserLastName!){\n        changeLastName(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updatePasswordMutation($input: ChangePassword!){\n        changePassword(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation updatePasswordMutation($input: ChangePassword!){\n        changePassword(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateProfileImageMutation($id:String!,$file: Upload!) {\n        updateProfileImg(id:$id,file: $file) {\n            id\n        }\n    }"): (typeof documents)["\n    mutation updateProfileImageMutation($id:String!,$file: Upload!) {\n        updateProfileImg(id:$id,file: $file) {\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation updateUserAddressMutation($input: UpdateUserAddress!){\n        updateUserAddress(input: $input){\n            id\n        }\n    }"): (typeof documents)["\n    mutation updateUserAddressMutation($input: UpdateUserAddress!){\n        updateUserAddress(input: $input){\n            id\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CitiesQuery($id: Int!){\n        cities(id:$id){\n            id\n            name\n            countryCode\n            latitude\n            longitude\n        }\n    }"): (typeof documents)["\n    query CitiesQuery($id: Int!){\n        cities(id:$id){\n            id\n            name\n            countryCode\n            latitude\n            longitude\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ComplaintByIdQuery($id: String!){\n        complaintById(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                    isOnline\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n                isEnterprise\n                enterpriseId\n            }\n        }\n    }"): (typeof documents)["\n    query ComplaintByIdQuery($id: String!){\n        complaintById(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                    isOnline\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n                isEnterprise\n                enterpriseId\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query complaintsByAuthorIdOrReceiverIdQuery($id: String!){\n        complaintsByAuthorOrReceiverId(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                }\n                body\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }"): (typeof documents)["\n    query complaintsByAuthorIdOrReceiverIdQuery($id: String!){\n        complaintsByAuthorOrReceiverId(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                }\n                body\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query complaintsForFeedbackByEmployeeIdQuery($id: String!){\n        complaintsForFeedbackByEmployeeId(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }"): (typeof documents)["query complaintsForFeedbackByEmployeeIdQuery($id: String!){\n        complaintsForFeedbackByEmployeeId(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query complaintsOfResolvedFeedbackByEmployeeId($id: String!){\n        complaintsOfResolvedFeedbackByEmployeeId(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }"): (typeof documents)["query complaintsOfResolvedFeedbackByEmployeeId($id: String!){\n        complaintsOfResolvedFeedbackByEmployeeId(id:$id){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query complaintsRatedByAuthorIdQuery($id:String!, $term:String){\n        complaintsRatedByAuthorId(id:$id, term: $term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    "): (typeof documents)["\n    query complaintsRatedByAuthorIdQuery($id:String!, $term:String){\n        complaintsRatedByAuthorId(id:$id, term: $term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query complaintsRatedByReceiverIdQuery($id:String!, $term: String){\n        complaintsRatedByReceiverId(id:$id, term: $term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    "): (typeof documents)["\n    query complaintsRatedByReceiverIdQuery($id:String!, $term: String){\n        complaintsRatedByReceiverId(id:$id, term: $term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query complaintsSentForReviewByReceiverIdQuery($id:String!, $term: String){\n        complaintsSentForReviewByReceiverId(id:$id, term: $term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    "): (typeof documents)["\n    query complaintsSentForReviewByReceiverIdQuery($id:String!, $term: String){\n        complaintsSentForReviewByReceiverId(id:$id, term: $term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query Countries{\n        countries{\n            id\n            name\n            phoneCode\n        }\n    }"): (typeof documents)["\n    query Countries{\n        countries{\n            id\n            name\n            phoneCode\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query CountryStatesQuery($id: Int!){\n        countryStates(id: $id) {\n            id\n            name\n        }\n    }"): (typeof documents)["\n    query CountryStatesQuery($id: Int!){\n        countryStates(id: $id) {\n            id\n            name\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query enterpriseByNameQuery($name: String!){\n        enterpriseByName(name:$name){\n            id\n            name\n            logoImg\n            bannerImg\n            website\n            email\n            phoneNumber\n            address {\n                country\n                countryState\n                city\n                }\n            industry {\n                id\n                name\n            }\n            foundationDate\n            ownerId\n            employees {\n                id\n                enterpriseId\n                userId\n                user{\n                    id\n                    userName\n                    person{\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address{\n                            country\n                            countryState\n                            city\n                        }\n                    }\n                    status\n                }\n                hiringDate\n                approvedHiring\n                approvedHiringAt\n                enterprisePosition\n            }\n        }\n    }"): (typeof documents)["\n    query enterpriseByNameQuery($name: String!){\n        enterpriseByName(name:$name){\n            id\n            name\n            logoImg\n            bannerImg\n            website\n            email\n            phoneNumber\n            address {\n                country\n                countryState\n                city\n                }\n            industry {\n                id\n                name\n            }\n            foundationDate\n            ownerId\n            employees {\n                id\n                enterpriseId\n                userId\n                user{\n                    id\n                    userName\n                    person{\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address{\n                            country\n                            countryState\n                            city\n                        }\n                    }\n                    status\n                }\n                hiringDate\n                approvedHiring\n                approvedHiringAt\n                enterprisePosition\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery EnterprisesByAuthenticatedUserQuery{\n    enterprisesByAuthenticatedUser{\n        enterprises{\n            authority{\n            authority\n            enterpriseId\n            principal\n        }\n        enterprise{\n            name\n            logoImg\n            bannerImg\n            website\n            email\n            phoneNumber\n            address {\n                country\n                countryState\n                city\n                }\n            industry {\n                id\n                name\n            }\n            foundationDate\n            ownerId\n        }\n        }\n        offices{\n            authority{\n            authority\n            enterpriseId\n            principal\n        }\n        enterprise{\n            name\n            logoImg\n            bannerImg\n            website\n            email\n            phoneNumber\n            address {\n                country\n                countryState\n                city\n                }\n            industry {\n                id\n                name\n            }\n            foundationDate\n            ownerId\n        }\n        }\n    }\n}\n"): (typeof documents)["\nquery EnterprisesByAuthenticatedUserQuery{\n    enterprisesByAuthenticatedUser{\n        enterprises{\n            authority{\n            authority\n            enterpriseId\n            principal\n        }\n        enterprise{\n            name\n            logoImg\n            bannerImg\n            website\n            email\n            phoneNumber\n            address {\n                country\n                countryState\n                city\n                }\n            industry {\n                id\n                name\n            }\n            foundationDate\n            ownerId\n        }\n        }\n        offices{\n            authority{\n            authority\n            enterpriseId\n            principal\n        }\n        enterprise{\n            name\n            logoImg\n            bannerImg\n            website\n            email\n            phoneNumber\n            address {\n                country\n                countryState\n                city\n                }\n            industry {\n                id\n                name\n            }\n            foundationDate\n            ownerId\n        }\n        }\n    }\n}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query findEnterpriseChatQuery($input: FindEnterpriseChat!){\n        findEnterpriseChat(input: $input){\n            id\n            enterpriseId\n            recipientOne {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            recipientTwo {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            replies {\n                id\n                chatId\n                sender {\n                    id\n                    subjectName\n                    subjectThumbnail\n                    subjectEmail\n                }\n                content\n                createdAt\n                updatedAt\n                seen\n            }\n        }\n    }"): (typeof documents)["\n    query findEnterpriseChatQuery($input: FindEnterpriseChat!){\n        findEnterpriseChat(input: $input){\n            id\n            enterpriseId\n            recipientOne {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            recipientTwo {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            replies {\n                id\n                chatId\n                sender {\n                    id\n                    subjectName\n                    subjectThumbnail\n                    subjectEmail\n                }\n                content\n                createdAt\n                updatedAt\n                seen\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query hiringProcessByAuthenticatedUserQuery{\n        hiringProcessByAuthenticatedUser{\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            industry {\n                id\n                name\n            }\n        }\n    }"): (typeof documents)["\n    query hiringProcessByAuthenticatedUserQuery{\n        hiringProcessByAuthenticatedUser{\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            industry {\n                id\n                name\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query hiringProcessByEnterpriseName($name: String!) {\n        hiringProcessByEnterpriseName(name:$name){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            industry {\n                id\n                name\n            }\n        }\n    }"): (typeof documents)["\n    query hiringProcessByEnterpriseName($name: String!) {\n        hiringProcessByEnterpriseName(name:$name){\n            id\n            enterprise {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            user {\n                id\n                userName\n                    person {\n                        profileImg\n                        email\n                        firstName\n                        lastName\n                        genre\n                        pronoun\n                        age\n                        phoneNumber\n                        address { \n                            country\n                            countryState\n                            city\n                            }\n                    }\n                status\n            }\n            role\n            status\n            reason\n            emitedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            occurredOn\n            lastUpdate\n            updatedBy {\n                id\n                subjectName\n                subjectThumbnail\n                subjectEmail\n            }\n            industry {\n                id\n                name\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query industries{\n        industries{\n            id\n            name\n        }\n    }"): (typeof documents)["query industries{\n        industries{\n            id\n            name\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query pendingReviewsByAuthorId($id:String!, $term: String){\n        pendingReviewsByAuthorId(id:$id,term:$term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }"): (typeof documents)["\n    query pendingReviewsByAuthorId($id:String!, $term: String){\n        pendingReviewsByAuthorId(id:$id,term:$term){\n            id\n            author{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            receiver{\n                id\n                subjectName\n                subjectThumbnail\n                isOnline\n                isEnterprise\n            }\n            status\n            title\n            description\n            createdAt\n            updatedAt\n            rating {\n                id\n                rate\n                comment\n                sentToReviewBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                ratedBy{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isOnline\n                    isEnterprise\n                }\n                createdAt\n                lastUpdate\n            }\n            replies{\n                id\n                complaintId\n                sender{\n                    id\n                    subjectName\n                    subjectThumbnail\n                    isEnterprise\n                }\n                body\n                read\n                readAt\n                createdAt\n                updatedAt\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query recipientsByNameLikeQuery($term:String!){\n        recipientsByNameLike(term:$term){\n            id\n            subjectName\n            subjectThumbnail\n            isEnterprise\n        }\n    }\n"): (typeof documents)["\n    query recipientsByNameLikeQuery($term:String!){\n        recipientsByNameLike(term:$term){\n            id\n            subjectName\n            subjectThumbnail\n            isEnterprise\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query User($id:String!){\n        userById(id:$id){\n                userName\n                person {\n                    profileImg\n                    email\n                    firstName\n                    lastName\n                    genre\n                    pronoun\n                    age\n                    phoneNumber\n                    address { \n                        country\n                        countryState\n                        city\n                        }\n                }\n                status\n        }\n    }"): (typeof documents)["\n    query User($id:String!){\n        userById(id:$id){\n                userName\n                person {\n                    profileImg\n                    email\n                    firstName\n                    lastName\n                    genre\n                    pronoun\n                    age\n                    phoneNumber\n                    address { \n                        country\n                        countryState\n                        city\n                        }\n                }\n                status\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query UserDescriptor{\n        userDescriptor{\n            id\n            userName\n            fullName\n            profileImg\n            genre\n            pronoun\n            authorities{\n                enterpriseId\n                principal\n                authority\n            }\n        }\n    }"): (typeof documents)["\n    query UserDescriptor{\n        userDescriptor{\n            id\n            userName\n            fullName\n            profileImg\n            genre\n            pronoun\n            authorities{\n                enterpriseId\n                principal\n                authority\n            }\n        }\n    }"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query usersForHiringQuery($input: SearchWithPagination!) {\n        usersForHiring(input:$input){\n            users {\n                id\n                userName\n                person {\n                    profileImg\n                    email\n                    firstName\n                    lastName\n                    genre\n                    pronoun\n                    age\n                    phoneNumber\n                    address { country countryState city}\n                }\n                status\n            }\n            count\n            limit\n            offset\n            nextCursor\n            prevCursor\n        }\n    }"): (typeof documents)["\n    query usersForHiringQuery($input: SearchWithPagination!) {\n        usersForHiring(input:$input){\n            users {\n                id\n                userName\n                person {\n                    profileImg\n                    email\n                    firstName\n                    lastName\n                    genre\n                    pronoun\n                    age\n                    phoneNumber\n                    address { country countryState city}\n                }\n                status\n            }\n            count\n            limit\n            offset\n            nextCursor\n            prevCursor\n        }\n    }"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;