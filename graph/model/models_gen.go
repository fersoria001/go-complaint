// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Address struct {
	Country      string `json:"country"`
	CountryState string `json:"countryState"`
	City         string `json:"city"`
}

type City struct {
	ID          int     `json:"id"`
	Name        string  `json:"name"`
	CountryCode string  `json:"countryCode"`
	Latitude    float64 `json:"latitude"`
	Longitude   float64 `json:"longitude"`
}

type Complaint struct {
	ID          string            `json:"id"`
	Author      *Recipient        `json:"author,omitempty"`
	Receiver    *Recipient        `json:"receiver"`
	Status      ComplaintStatus   `json:"status"`
	Title       string            `json:"title"`
	Description string            `json:"description"`
	Rating      *Rating           `json:"rating,omitempty"`
	CreatedAt   string            `json:"createdAt"`
	UpdatedAt   string            `json:"updatedAt"`
	Replies     []*ComplaintReply `json:"replies"`
}

type ComplaintData struct {
	ID          string            `json:"id"`
	OwnerID     string            `json:"ownerId"`
	ComplaintID string            `json:"complaintId"`
	OccurredOn  string            `json:"occurredOn"`
	DataType    ComplaintDataType `json:"dataType"`
}

type ComplaintReply struct {
	ID          string     `json:"id"`
	ComplaintID string     `json:"complaintId"`
	Sender      *Recipient `json:"sender"`
	Body        string     `json:"body"`
	CreatedAt   string     `json:"createdAt"`
	Read        *bool      `json:"read,omitempty"`
	ReadAt      string     `json:"readAt"`
	UpdatedAt   string     `json:"updatedAt"`
}

type ComplaintsInfo struct {
	Received []*ComplaintData `json:"received"`
	Resolved []*ComplaintData `json:"resolved"`
	Reviewed []*ComplaintData `json:"reviewed"`
	Sent     []*ComplaintData `json:"sent"`
}

type Country struct {
	ID        int    `json:"id"`
	Name      string `json:"name"`
	PhoneCode string `json:"phoneCode"`
}

type CountryState struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type CreateEnterprise struct {
	Name           string `json:"name"`
	Website        string `json:"website"`
	Email          string `json:"email"`
	PhoneNumber    string `json:"phoneNumber"`
	CountryID      int    `json:"countryId"`
	CountryStateID int    `json:"countryStateId"`
	CityID         int    `json:"cityId"`
	IndustryID     int    `json:"industryId"`
	FoundationDate string `json:"foundationDate"`
}

type CreateHiringInvitation struct {
	EnterpriseID     string `json:"enterpriseId"`
	ProposedPosition string `json:"proposedPosition"`
	ProposeTo        string `json:"proposeTo"`
}

type CreateNewComplaint struct {
	AuthorID   string `json:"authorId"`
	ReceiverID string `json:"receiverId"`
}

type CreateUser struct {
	UserName       string `json:"userName"`
	Password       string `json:"password"`
	FirstName      string `json:"firstName"`
	LastName       string `json:"lastName"`
	Genre          string `json:"genre"`
	Pronoun        string `json:"pronoun"`
	BirthDate      string `json:"birthDate"`
	PhoneNumber    string `json:"phoneNumber"`
	CountryID      int    `json:"countryId"`
	CountryStateID int    `json:"countryStateId"`
	CityID         int    `json:"cityId"`
}

type DescribeComplaint struct {
	ComplaintID string `json:"complaintId"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

type Employee struct {
	ID                 string `json:"id"`
	EnterpriseID       string `json:"enterpriseId"`
	UserID             string `json:"userId"`
	User               *User  `json:"user"`
	HiringDate         string `json:"hiringDate"`
	ApprovedHiring     bool   `json:"approvedHiring"`
	ApprovedHiringAt   string `json:"approvedHiringAt"`
	EnterprisePosition string `json:"enterprisePosition"`
}

type Enterprise struct {
	ID             string      `json:"id"`
	Name           string      `json:"name"`
	LogoImg        string      `json:"logoImg"`
	BannerImg      string      `json:"bannerImg"`
	Website        string      `json:"website"`
	Email          string      `json:"email"`
	PhoneNumber    string      `json:"phoneNumber"`
	Address        *Address    `json:"address"`
	Industry       string      `json:"industry"`
	FoundationDate string      `json:"foundationDate"`
	OwnerID        string      `json:"ownerId"`
	Employees      []*Employee `json:"employees"`
}

type EnterpriseByAuthenticatedUser struct {
	Authority  *GrantedAuthority `json:"authority"`
	Enterprise *Enterprise       `json:"enterprise,omitempty"`
}

type EnterprisesByAuthenticatedUserResult struct {
	Enterprises []*EnterpriseByAuthenticatedUser `json:"enterprises"`
	Offices     []*EnterpriseByAuthenticatedUser `json:"offices"`
}

type GrantedAuthority struct {
	EnterpriseID string `json:"enterpriseId"`
	Principal    string `json:"principal"`
	Authority    string `json:"authority"`
}

type HiringInvitation struct {
	EventID           string              `json:"eventId"`
	EnterpriseID      string              `json:"enterpriseId"`
	ProposedPosition  string              `json:"proposedPosition"`
	OwnerID           string              `json:"ownerId"`
	FullName          string              `json:"fullName"`
	EnterpriseEmail   string              `json:"enterpriseEmail"`
	EnterprisePhone   string              `json:"enterprisePhone"`
	EnterpriseLogoImg string              `json:"enterpriseLogoImg"`
	OccurredOn        string              `json:"occurredOn"`
	Seen              bool                `json:"seen"`
	Status            HiringProccessState `json:"status"`
	Reason            string              `json:"reason"`
}

type Industry struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Mutation struct {
}

type Notification struct {
	ID         string     `json:"id"`
	Owner      *Recipient `json:"owner"`
	Sender     *Recipient `json:"sender"`
	Title      string     `json:"title"`
	Content    string     `json:"content"`
	Link       string     `json:"link"`
	Seen       bool       `json:"seen"`
	OccurredOn string     `json:"occurredOn"`
}

type Person struct {
	ProfileImg  string   `json:"profileImg"`
	Email       string   `json:"email"`
	FirstName   string   `json:"firstName"`
	LastName    string   `json:"lastName"`
	Genre       string   `json:"genre"`
	Pronoun     string   `json:"pronoun"`
	Age         int      `json:"age"`
	PhoneNumber string   `json:"phoneNumber"`
	Address     *Address `json:"address"`
}

type Query struct {
}

type Rating struct {
	ID      string `json:"id"`
	Rate    int    `json:"rate"`
	Comment string `json:"comment"`
}

type Recipient struct {
	ID               string  `json:"id"`
	SubjectName      *string `json:"subjectName,omitempty"`
	SubjectThumbnail *string `json:"subjectThumbnail,omitempty"`
	SubjectEmail     *string `json:"subjectEmail,omitempty"`
	IsEnterprise     *bool   `json:"isEnterprise,omitempty"`
	IsOnline         bool    `json:"isOnline"`
}

type SearchWithPagination struct {
	ID     string `json:"id"`
	Limit  int    `json:"limit"`
	Offset int    `json:"offset"`
	Query  string `json:"query"`
}

type SendComplaint struct {
	ComplaintID string `json:"complaintId"`
	Body        string `json:"body"`
}

type Subscription struct {
}

type User struct {
	UserName string     `json:"userName"`
	Person   *Person    `json:"person"`
	Status   UserStatus `json:"status"`
}

type UserDescriptor struct {
	ID          string              `json:"id"`
	UserName    string              `json:"userName"`
	FullName    string              `json:"fullName"`
	ProfileImg  string              `json:"profileImg"`
	Genre       string              `json:"genre"`
	Pronoun     string              `json:"pronoun"`
	LoginDate   *string             `json:"loginDate,omitempty"`
	IP          *string             `json:"ip,omitempty"`
	Device      *string             `json:"device,omitempty"`
	Geolocation *string             `json:"geolocation,omitempty"`
	Authorities []*GrantedAuthority `json:"authorities,omitempty"`
}

type UsersForHiringResult struct {
	Users      []*User `json:"users"`
	Count      int     `json:"count"`
	Limit      int     `json:"limit"`
	Offset     int     `json:"offset"`
	NextCursor int     `json:"nextCursor"`
	PrevCursor int     `json:"prevCursor"`
}

type ComplaintDataType string

const (
	ComplaintDataTypeSent     ComplaintDataType = "SENT"
	ComplaintDataTypeResolved ComplaintDataType = "RESOLVED"
	ComplaintDataTypeReviewed ComplaintDataType = "REVIEWED"
	ComplaintDataTypeReceived ComplaintDataType = "RECEIVED"
)

var AllComplaintDataType = []ComplaintDataType{
	ComplaintDataTypeSent,
	ComplaintDataTypeResolved,
	ComplaintDataTypeReviewed,
	ComplaintDataTypeReceived,
}

func (e ComplaintDataType) IsValid() bool {
	switch e {
	case ComplaintDataTypeSent, ComplaintDataTypeResolved, ComplaintDataTypeReviewed, ComplaintDataTypeReceived:
		return true
	}
	return false
}

func (e ComplaintDataType) String() string {
	return string(e)
}

func (e *ComplaintDataType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComplaintDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComplaintDataType", str)
	}
	return nil
}

func (e ComplaintDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ComplaintStatus string

const (
	ComplaintStatusWriting      ComplaintStatus = "WRITING"
	ComplaintStatusOpen         ComplaintStatus = "OPEN"
	ComplaintStatusStarted      ComplaintStatus = "STARTED"
	ComplaintStatusInDiscussion ComplaintStatus = "IN_DISCUSSION"
	ComplaintStatusInReview     ComplaintStatus = "IN_REVIEW"
	ComplaintStatusClosed       ComplaintStatus = "CLOSED"
	ComplaintStatusInHistory    ComplaintStatus = "IN_HISTORY"
)

var AllComplaintStatus = []ComplaintStatus{
	ComplaintStatusWriting,
	ComplaintStatusOpen,
	ComplaintStatusStarted,
	ComplaintStatusInDiscussion,
	ComplaintStatusInReview,
	ComplaintStatusClosed,
	ComplaintStatusInHistory,
}

func (e ComplaintStatus) IsValid() bool {
	switch e {
	case ComplaintStatusWriting, ComplaintStatusOpen, ComplaintStatusStarted, ComplaintStatusInDiscussion, ComplaintStatusInReview, ComplaintStatusClosed, ComplaintStatusInHistory:
		return true
	}
	return false
}

func (e ComplaintStatus) String() string {
	return string(e)
}

func (e *ComplaintStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComplaintStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComplaintStatus", str)
	}
	return nil
}

func (e ComplaintStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringProccessState string

const (
	HiringProccessStatePending      HiringProccessState = "pending"
	HiringProccessStateAccepted     HiringProccessState = "accepted"
	HiringProccessStateRejected     HiringProccessState = "rejected"
	HiringProccessStateUserAccepted HiringProccessState = "user_accepted"
	HiringProccessStateCanceled     HiringProccessState = "canceled"
	HiringProccessStateHired        HiringProccessState = "hired"
	HiringProccessStateRated        HiringProccessState = "rated"
	HiringProccessStateWaiting      HiringProccessState = "waiting"
	HiringProccessStateFired        HiringProccessState = "fired"
	HiringProccessStateLeaved       HiringProccessState = "leaved"
)

var AllHiringProccessState = []HiringProccessState{
	HiringProccessStatePending,
	HiringProccessStateAccepted,
	HiringProccessStateRejected,
	HiringProccessStateUserAccepted,
	HiringProccessStateCanceled,
	HiringProccessStateHired,
	HiringProccessStateRated,
	HiringProccessStateWaiting,
	HiringProccessStateFired,
	HiringProccessStateLeaved,
}

func (e HiringProccessState) IsValid() bool {
	switch e {
	case HiringProccessStatePending, HiringProccessStateAccepted, HiringProccessStateRejected, HiringProccessStateUserAccepted, HiringProccessStateCanceled, HiringProccessStateHired, HiringProccessStateRated, HiringProccessStateWaiting, HiringProccessStateFired, HiringProccessStateLeaved:
		return true
	}
	return false
}

func (e HiringProccessState) String() string {
	return string(e)
}

func (e *HiringProccessState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringProccessState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringProccessState", str)
	}
	return nil
}

func (e HiringProccessState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusOffline UserStatus = "OFFLINE"
	UserStatusOnline  UserStatus = "ONLINE"
)

var AllUserStatus = []UserStatus{
	UserStatusOffline,
	UserStatusOnline,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusOffline, UserStatusOnline:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
