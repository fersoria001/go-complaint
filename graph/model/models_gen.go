// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AcceptHiringInvitation struct {
	UserID          string `json:"userId"`
	HiringProcessID string `json:"hiringProcessId"`
}

type AddFeedbackComment struct {
	FeedbackID string `json:"feedbackId"`
	Color      string `json:"color"`
	Comment    string `json:"comment"`
}

type AddFeedbackReply struct {
	FeedbackID string   `json:"feedbackId"`
	ReviewerID string   `json:"reviewerId"`
	Color      string   `json:"color"`
	RepliesIds []string `json:"repliesIds"`
}

type Address struct {
	Country      string `json:"country"`
	CountryState string `json:"countryState"`
	City         string `json:"city"`
}

type CancelHiringProcess struct {
	EnterpriseID      string `json:"enterpriseId"`
	HiringProcessID   string `json:"hiringProcessId"`
	CanceledBy        string `json:"canceledBy"`
	CancelationReason string `json:"cancelationReason"`
}

type ChangeEnterpriseAddress struct {
	EnterpriseID string `json:"enterpriseId"`
	NewCountryID int    `json:"newCountryId"`
	NewCountyID  int    `json:"newCountyId"`
	NewCityID    int    `json:"newCityId"`
}

type ChangeEnterpriseEmail struct {
	EnterpriseID string `json:"enterpriseId"`
	NewEmail     string `json:"newEmail"`
}

type ChangeEnterprisePhone struct {
	EnterpriseID string `json:"enterpriseId"`
	NewPhone     string `json:"newPhone"`
}

type ChangeEnterpriseWebsite struct {
	EnterpriseID string `json:"enterpriseId"`
	NewWebsite   string `json:"newWebsite"`
}

type ChangePassword struct {
	Username    string `json:"username"`
	OldPassword string `json:"oldPassword"`
	NewPassword string `json:"newPassword"`
}

type ChangeUserFirstName struct {
	UserID       string `json:"userId"`
	NewFirstName string `json:"newFirstName"`
}

type ChangeUserGenre struct {
	UserID   string `json:"userId"`
	NewGenre string `json:"newGenre"`
}

type ChangeUserLastName struct {
	UserID      string `json:"userId"`
	NewLastName string `json:"newLastName"`
}

type ChangeUserPhone struct {
	UserID   string `json:"userId"`
	NewPhone string `json:"newPhone"`
}

type ChangeUserPronoun struct {
	UserID     string `json:"userId"`
	NewPronoun string `json:"newPronoun"`
}

type Chat struct {
	ID           string       `json:"id"`
	EnterpriseID string       `json:"enterpriseId"`
	RecipientOne *Recipient   `json:"recipientOne"`
	RecipientTwo *Recipient   `json:"recipientTwo"`
	Replies      []*ChatReply `json:"replies"`
}

type ChatReply struct {
	ID        string     `json:"id"`
	ChatID    string     `json:"chatId"`
	Sender    *Recipient `json:"sender"`
	Content   string     `json:"content"`
	Seen      bool       `json:"seen"`
	CreatedAt string     `json:"createdAt"`
	UpdatedAt string     `json:"updatedAt"`
}

type City struct {
	ID          int     `json:"id"`
	Name        string  `json:"name"`
	CountryCode string  `json:"countryCode"`
	Latitude    float64 `json:"latitude"`
	Longitude   float64 `json:"longitude"`
}

type Complaint struct {
	ID          *string           `json:"id,omitempty"`
	Author      *Recipient        `json:"author,omitempty"`
	Receiver    *Recipient        `json:"receiver,omitempty"`
	Status      *ComplaintStatus  `json:"status,omitempty"`
	Title       *string           `json:"title,omitempty"`
	Description *string           `json:"description,omitempty"`
	Rating      *Rating           `json:"rating,omitempty"`
	CreatedAt   *string           `json:"createdAt,omitempty"`
	UpdatedAt   *string           `json:"updatedAt,omitempty"`
	Replies     []*ComplaintReply `json:"replies,omitempty"`
}

type ComplaintData struct {
	ID          string            `json:"id"`
	OwnerID     string            `json:"ownerId"`
	ComplaintID string            `json:"complaintId"`
	OccurredOn  string            `json:"occurredOn"`
	DataType    ComplaintDataType `json:"dataType"`
}

type ComplaintReply struct {
	ID           *string    `json:"id,omitempty"`
	ComplaintID  *string    `json:"complaintId,omitempty"`
	Sender       *Recipient `json:"sender,omitempty"`
	Body         *string    `json:"body,omitempty"`
	CreatedAt    *string    `json:"createdAt,omitempty"`
	Read         *bool      `json:"read,omitempty"`
	ReadAt       *string    `json:"readAt,omitempty"`
	UpdatedAt    *string    `json:"updatedAt,omitempty"`
	IsEnterprise *bool      `json:"isEnterprise,omitempty"`
	EnterpriseID *string    `json:"enterpriseId,omitempty"`
}

type ContactEmail struct {
	From    string  `json:"from"`
	Message *string `json:"message,omitempty"`
}

type Country struct {
	ID        int    `json:"id"`
	Name      string `json:"name"`
	PhoneCode string `json:"phoneCode"`
}

type CountryState struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type CreateEnterprise struct {
	Name           string `json:"name"`
	Website        string `json:"website"`
	Email          string `json:"email"`
	PhoneNumber    string `json:"phoneNumber"`
	CountryID      int    `json:"countryId"`
	CountryStateID int    `json:"countryStateId"`
	CityID         int    `json:"cityId"`
	IndustryID     int    `json:"industryId"`
	FoundationDate string `json:"foundationDate"`
}

type CreateEnterpriseChat struct {
	EnterpriseID string `json:"enterpriseId"`
	SenderID     string `json:"senderId"`
	ReceiverID   string `json:"receiverId"`
}

type CreateFeedback struct {
	ComplaintID  string `json:"complaintId"`
	EnterpriseID string `json:"enterpriseId"`
}

type CreateHiringInvitation struct {
	EnterpriseID     string `json:"enterpriseId"`
	ProposedPosition string `json:"proposedPosition"`
	ProposeTo        string `json:"proposeTo"`
}

type CreateNewComplaint struct {
	AuthorID   string `json:"authorId"`
	ReceiverID string `json:"receiverId"`
}

type CreateUser struct {
	UserName       string `json:"userName"`
	Password       string `json:"password"`
	FirstName      string `json:"firstName"`
	LastName       string `json:"lastName"`
	Genre          string `json:"genre"`
	Pronoun        string `json:"pronoun"`
	BirthDate      string `json:"birthDate"`
	PhoneNumber    string `json:"phoneNumber"`
	CountryID      int    `json:"countryId"`
	CountryStateID int    `json:"countryStateId"`
	CityID         int    `json:"cityId"`
}

type DescribeComplaint struct {
	ComplaintID string `json:"complaintId"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

type Employee struct {
	ID                 string `json:"id"`
	EnterpriseID       string `json:"enterpriseId"`
	UserID             string `json:"userId"`
	User               *User  `json:"user"`
	HiringDate         string `json:"hiringDate"`
	ApprovedHiring     bool   `json:"approvedHiring"`
	ApprovedHiringAt   string `json:"approvedHiringAt"`
	EnterprisePosition string `json:"enterprisePosition"`
}

type EndFeedback struct {
	FeedbackID string `json:"feedbackId"`
	ReviewerID string `json:"reviewerId"`
}

type Enterprise struct {
	ID             string      `json:"id"`
	Name           string      `json:"name"`
	LogoImg        string      `json:"logoImg"`
	BannerImg      string      `json:"bannerImg"`
	Website        string      `json:"website"`
	Email          string      `json:"email"`
	PhoneNumber    string      `json:"phoneNumber"`
	Address        *Address    `json:"address"`
	Industry       *Industry   `json:"industry"`
	FoundationDate string      `json:"foundationDate"`
	OwnerID        string      `json:"ownerId"`
	Employees      []*Employee `json:"employees"`
}

type EnterpriseActivity struct {
	ID             string                 `json:"id"`
	User           *Recipient             `json:"user"`
	ActivityID     string                 `json:"activityId"`
	EnterpriseID   string                 `json:"enterpriseId"`
	EnterpriseName string                 `json:"enterpriseName"`
	OccurredOn     string                 `json:"occurredOn"`
	ActivityType   EnterpriseActivityType `json:"activityType"`
}

type EnterpriseByAuthenticatedUser struct {
	Authority  *GrantedAuthority `json:"authority"`
	Enterprise *Enterprise       `json:"enterprise,omitempty"`
}

type EnterprisesByAuthenticatedUserResult struct {
	Enterprises []*EnterpriseByAuthenticatedUser `json:"enterprises"`
	Offices     []*EnterpriseByAuthenticatedUser `json:"offices"`
}

type Feedback struct {
	ID           string         `json:"id"`
	ComplaintID  string         `json:"complaintId"`
	EnterpriseID string         `json:"enterpriseId"`
	ReplyReview  []*ReplyReview `json:"replyReview"`
	ReviewedAt   string         `json:"reviewedAt"`
	UpdatedAt    string         `json:"updatedAt"`
	IsDone       bool           `json:"isDone"`
}

type FindComplaintWriting struct {
	AuthorID   string `json:"authorId"`
	ReceiverID string `json:"receiverId"`
}

type FindEnterpriseChat struct {
	EnterpriseID   string `json:"enterpriseId"`
	RecipientOneID string `json:"recipientOneId"`
	RecipientTwoID string `json:"recipientTwoId"`
}

type FireEmployee struct {
	EnterpriseName string `json:"enterpriseName"`
	EmployeeID     string `json:"employeeId"`
	TriggeredBy    string `json:"triggeredBy"`
	FireReason     string `json:"fireReason"`
}

type GrantedAuthority struct {
	EnterpriseID string `json:"enterpriseId"`
	Principal    string `json:"principal"`
	Authority    Roles  `json:"authority"`
}

type HireEmployee struct {
	EnterpriseID    string `json:"enterpriseId"`
	HiringProcessID string `json:"hiringProcessId"`
	HiredByID       string `json:"hiredById"`
}

type HiringProcess struct {
	ID         string                `json:"id"`
	Enterprise *Recipient            `json:"enterprise,omitempty"`
	User       *User                 `json:"user"`
	Role       string                `json:"role"`
	Status     *HiringProccessStatus `json:"status,omitempty"`
	Reason     *string               `json:"reason,omitempty"`
	EmitedBy   *Recipient            `json:"emitedBy"`
	OccurredOn string                `json:"occurredOn"`
	LastUpdate string                `json:"lastUpdate"`
	UpdatedBy  *Recipient            `json:"updatedBy,omitempty"`
	Industry   *Industry             `json:"industry,omitempty"`
}

type Industry struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type InviteToProject struct {
	EnterpriseID string `json:"enterpriseId"`
	Role         string `json:"role"`
	ProposeTo    string `json:"proposeTo"`
	ProposedBy   string `json:"proposedBy"`
}

type Mutation struct {
}

type NotificationLink struct {
	ID         string     `json:"id"`
	Owner      *Recipient `json:"owner"`
	Sender     *Recipient `json:"sender"`
	Title      string     `json:"title"`
	Content    string     `json:"content"`
	Link       string     `json:"link"`
	Seen       bool       `json:"seen"`
	OccurredOn string     `json:"occurredOn"`
}

type Person struct {
	ProfileImg  string   `json:"profileImg"`
	Email       string   `json:"email"`
	FirstName   string   `json:"firstName"`
	LastName    string   `json:"lastName"`
	Genre       string   `json:"genre"`
	Pronoun     string   `json:"pronoun"`
	Age         int      `json:"age"`
	PhoneNumber string   `json:"phoneNumber"`
	Address     *Address `json:"address"`
}

type PromoteEmployee struct {
	EnterpriseName string `json:"enterpriseName"`
	EmployeeID     string `json:"employeeId"`
	PromoteTo      string `json:"promoteTo"`
	PromotedByID   string `json:"promotedById"`
}

type Query struct {
}

type RateComplaint struct {
	UserID      string `json:"userId"`
	ComplaintID string `json:"complaintId"`
	Rate        int    `json:"rate"`
	Comment     string `json:"comment"`
}

type Rating struct {
	ID             *string    `json:"id,omitempty"`
	Rate           *int       `json:"rate,omitempty"`
	Comment        *string    `json:"comment,omitempty"`
	SentToReviewBy *Recipient `json:"sentToReviewBy,omitempty"`
	RatedBy        *Recipient `json:"ratedBy,omitempty"`
	CreatedAt      *string    `json:"createdAt,omitempty"`
	LastUpdate     *string    `json:"lastUpdate,omitempty"`
}

type Recipient struct {
	ID               *string `json:"id,omitempty"`
	SubjectName      *string `json:"subjectName,omitempty"`
	SubjectThumbnail *string `json:"subjectThumbnail,omitempty"`
	SubjectEmail     *string `json:"subjectEmail,omitempty"`
	IsEnterprise     *bool   `json:"isEnterprise,omitempty"`
	IsOnline         *bool   `json:"isOnline,omitempty"`
}

type RejectHiringInvitation struct {
	UserID          string  `json:"userId"`
	HiringProcessID string  `json:"hiringProcessId"`
	RejectionReason *string `json:"rejectionReason,omitempty"`
}

type RemoveFeedbackComment struct {
	Color      string `json:"color"`
	FeedbackID string `json:"feedbackId"`
}

type RemoveFeedbackReply struct {
	FeedbackID string   `json:"feedbackId"`
	Color      string   `json:"color"`
	RepliesIds []string `json:"repliesIds"`
}

type ReplyReview struct {
	ID         string            `json:"id"`
	FeedbackID string            `json:"feedbackId"`
	Reviewer   *User             `json:"reviewer"`
	Replies    []*ComplaintReply `json:"replies"`
	Review     *Review           `json:"review,omitempty"`
	Color      string            `json:"color"`
	CreatedAt  string            `json:"createdAt"`
}

type Review struct {
	ID      string  `json:"id"`
	Comment *string `json:"comment,omitempty"`
}

type SearchWithPagination struct {
	ID     string `json:"id"`
	Limit  int    `json:"limit"`
	Offset int    `json:"offset"`
	Query  string `json:"query"`
}

type SendComplaint struct {
	ComplaintID string `json:"complaintId"`
	Body        string `json:"body"`
}

type Subscription struct {
}

type UpdateUserAddress struct {
	UserID       string `json:"userId"`
	NewCountryID int    `json:"newCountryId"`
	NewCountyID  int    `json:"newCountyId"`
	NewCityID    int    `json:"newCityId"`
}

type User struct {
	ID       string     `json:"id"`
	UserName string     `json:"userName"`
	Person   *Person    `json:"person"`
	Status   UserStatus `json:"status"`
}

type UserDescriptor struct {
	ID          string              `json:"id"`
	UserName    string              `json:"userName"`
	FullName    string              `json:"fullName"`
	ProfileImg  string              `json:"profileImg"`
	Genre       string              `json:"genre"`
	Pronoun     string              `json:"pronoun"`
	LoginDate   *string             `json:"loginDate,omitempty"`
	IP          *string             `json:"ip,omitempty"`
	Device      *string             `json:"device,omitempty"`
	Geolocation *string             `json:"geolocation,omitempty"`
	Authorities []*GrantedAuthority `json:"authorities,omitempty"`
}

type UsersForHiringResult struct {
	Users      []*User `json:"users"`
	Count      int     `json:"count"`
	Limit      int     `json:"limit"`
	Offset     int     `json:"offset"`
	NextCursor int     `json:"nextCursor"`
	PrevCursor int     `json:"prevCursor"`
}

type ComplaintDataType string

const (
	ComplaintDataTypeSent     ComplaintDataType = "SENT"
	ComplaintDataTypeResolved ComplaintDataType = "RESOLVED"
	ComplaintDataTypeReviewed ComplaintDataType = "REVIEWED"
	ComplaintDataTypeReceived ComplaintDataType = "RECEIVED"
)

var AllComplaintDataType = []ComplaintDataType{
	ComplaintDataTypeSent,
	ComplaintDataTypeResolved,
	ComplaintDataTypeReviewed,
	ComplaintDataTypeReceived,
}

func (e ComplaintDataType) IsValid() bool {
	switch e {
	case ComplaintDataTypeSent, ComplaintDataTypeResolved, ComplaintDataTypeReviewed, ComplaintDataTypeReceived:
		return true
	}
	return false
}

func (e ComplaintDataType) String() string {
	return string(e)
}

func (e *ComplaintDataType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComplaintDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComplaintDataType", str)
	}
	return nil
}

func (e ComplaintDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ComplaintStatus string

const (
	ComplaintStatusWriting      ComplaintStatus = "WRITING"
	ComplaintStatusOpen         ComplaintStatus = "OPEN"
	ComplaintStatusStarted      ComplaintStatus = "STARTED"
	ComplaintStatusInDiscussion ComplaintStatus = "IN_DISCUSSION"
	ComplaintStatusInReview     ComplaintStatus = "IN_REVIEW"
	ComplaintStatusClosed       ComplaintStatus = "CLOSED"
	ComplaintStatusInHistory    ComplaintStatus = "IN_HISTORY"
)

var AllComplaintStatus = []ComplaintStatus{
	ComplaintStatusWriting,
	ComplaintStatusOpen,
	ComplaintStatusStarted,
	ComplaintStatusInDiscussion,
	ComplaintStatusInReview,
	ComplaintStatusClosed,
	ComplaintStatusInHistory,
}

func (e ComplaintStatus) IsValid() bool {
	switch e {
	case ComplaintStatusWriting, ComplaintStatusOpen, ComplaintStatusStarted, ComplaintStatusInDiscussion, ComplaintStatusInReview, ComplaintStatusClosed, ComplaintStatusInHistory:
		return true
	}
	return false
}

func (e ComplaintStatus) String() string {
	return string(e)
}

func (e *ComplaintStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComplaintStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComplaintStatus", str)
	}
	return nil
}

func (e ComplaintStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnterpriseActivityType string

const (
	EnterpriseActivityTypeFeedbacksStarted  EnterpriseActivityType = "FEEDBACKS_STARTED"
	EnterpriseActivityTypeFeedbacksReceived EnterpriseActivityType = "FEEDBACKS_RECEIVED"
	EnterpriseActivityTypeJobProposalsSent  EnterpriseActivityType = "JOB_PROPOSALS_SENT"
	EnterpriseActivityTypeEmployeesHired    EnterpriseActivityType = "EMPLOYEES_HIRED"
	EnterpriseActivityTypeEmployeesFired    EnterpriseActivityType = "EMPLOYEES_FIRED"
	EnterpriseActivityTypeComplaintSent     EnterpriseActivityType = "COMPLAINT_SENT"
	EnterpriseActivityTypeComplaintResolved EnterpriseActivityType = "COMPLAINT_RESOLVED"
	EnterpriseActivityTypeComplaintReviewed EnterpriseActivityType = "COMPLAINT_REVIEWED"
)

var AllEnterpriseActivityType = []EnterpriseActivityType{
	EnterpriseActivityTypeFeedbacksStarted,
	EnterpriseActivityTypeFeedbacksReceived,
	EnterpriseActivityTypeJobProposalsSent,
	EnterpriseActivityTypeEmployeesHired,
	EnterpriseActivityTypeEmployeesFired,
	EnterpriseActivityTypeComplaintSent,
	EnterpriseActivityTypeComplaintResolved,
	EnterpriseActivityTypeComplaintReviewed,
}

func (e EnterpriseActivityType) IsValid() bool {
	switch e {
	case EnterpriseActivityTypeFeedbacksStarted, EnterpriseActivityTypeFeedbacksReceived, EnterpriseActivityTypeJobProposalsSent, EnterpriseActivityTypeEmployeesHired, EnterpriseActivityTypeEmployeesFired, EnterpriseActivityTypeComplaintSent, EnterpriseActivityTypeComplaintResolved, EnterpriseActivityTypeComplaintReviewed:
		return true
	}
	return false
}

func (e EnterpriseActivityType) String() string {
	return string(e)
}

func (e *EnterpriseActivityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseActivityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseActivityType", str)
	}
	return nil
}

func (e EnterpriseActivityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HiringProccessStatus string

const (
	HiringProccessStatusPending      HiringProccessStatus = "PENDING"
	HiringProccessStatusAccepted     HiringProccessStatus = "ACCEPTED"
	HiringProccessStatusRejected     HiringProccessStatus = "REJECTED"
	HiringProccessStatusUserAccepted HiringProccessStatus = "USER_ACCEPTED"
	HiringProccessStatusCanceled     HiringProccessStatus = "CANCELED"
	HiringProccessStatusHired        HiringProccessStatus = "HIRED"
	HiringProccessStatusRated        HiringProccessStatus = "RATED"
	HiringProccessStatusWaiting      HiringProccessStatus = "WAITING"
	HiringProccessStatusFired        HiringProccessStatus = "FIRED"
	HiringProccessStatusLeaved       HiringProccessStatus = "LEAVED"
)

var AllHiringProccessStatus = []HiringProccessStatus{
	HiringProccessStatusPending,
	HiringProccessStatusAccepted,
	HiringProccessStatusRejected,
	HiringProccessStatusUserAccepted,
	HiringProccessStatusCanceled,
	HiringProccessStatusHired,
	HiringProccessStatusRated,
	HiringProccessStatusWaiting,
	HiringProccessStatusFired,
	HiringProccessStatusLeaved,
}

func (e HiringProccessStatus) IsValid() bool {
	switch e {
	case HiringProccessStatusPending, HiringProccessStatusAccepted, HiringProccessStatusRejected, HiringProccessStatusUserAccepted, HiringProccessStatusCanceled, HiringProccessStatusHired, HiringProccessStatusRated, HiringProccessStatusWaiting, HiringProccessStatusFired, HiringProccessStatusLeaved:
		return true
	}
	return false
}

func (e HiringProccessStatus) String() string {
	return string(e)
}

func (e *HiringProccessStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HiringProccessStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HiringProccessStatus", str)
	}
	return nil
}

func (e HiringProccessStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Roles string

const (
	RolesAssistant Roles = "ASSISTANT"
	RolesManager   Roles = "MANAGER"
	RolesOwner     Roles = "OWNER"
)

var AllRoles = []Roles{
	RolesAssistant,
	RolesManager,
	RolesOwner,
}

func (e Roles) IsValid() bool {
	switch e {
	case RolesAssistant, RolesManager, RolesOwner:
		return true
	}
	return false
}

func (e Roles) String() string {
	return string(e)
}

func (e *Roles) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Roles(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Roles", str)
	}
	return nil
}

func (e Roles) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusOffline UserStatus = "OFFLINE"
	UserStatusOnline  UserStatus = "ONLINE"
)

var AllUserStatus = []UserStatus{
	UserStatusOffline,
	UserStatusOnline,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusOffline, UserStatusOnline:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
