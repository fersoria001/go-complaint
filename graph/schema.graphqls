# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Country {
  id: Int!
  name: String!
  phoneCode: String!
}

type CountryState {
  id: Int!
  name: String!
}

type City {
  id: Int!
  name: String!
  countryCode: String!
  latitude: Float!
  longitude: Float!
}

input CreateUser {
  userName: String!
  password: String!
  firstName: String!
  lastName: String!
  genre: String!
  pronoun: String!
  birthDate: String!
  phoneNumber: String!
  countryId: Int!
  countryStateId: Int!
  cityId: Int!
}

type Address {
  country: String!
  countryState: String!
  city: String!
}

enum UserStatus {
  OFFLINE
  ONLINE
}

type Person {
  profileImg: String!
  email: String!
  firstName: String!
  lastName: String!
  genre: String!
  pronoun: String!
  age: Int!
  phoneNumber: String!
  address: Address!
}

type User {
  userName: String!
  person: Person!
  status: UserStatus!
}

type Notification {
  id: String!
  owner: Recipient!
  sender: Recipient!
  title: String!
  content: String!
  link: String!
  seen: Boolean!
  occurredOn: String!
}

type GrantedAuthority {
  enterpriseId: String!
  principal: String!
  authority: String!
}

type UserDescriptor {
  id: String!
  userName: String!
  fullName: String!
  profileImg: String!
  genre: String!
  pronoun: String!
  loginDate: String
  ip: String
  device: String
  geolocation: String
  authorities: [GrantedAuthority]
}

type Recipient {
  id: String!
  subjectName: String
  subjectThumbnail: String
  subjectEmail: String
  isEnterprise: Boolean
  isOnline: Boolean!
}

enum ComplaintStatus {
  WRITING
  OPEN
  STARTED
  IN_DISCUSSION
  IN_REVIEW
  CLOSED
  IN_HISTORY
}

type Rating {
  id: String!
  rate: Int!
  comment: String!
}

type ComplaintReply {
  id: String!
  complaintId: String!
  sender: Recipient!
  body: String!
  createdAt: String!
  read: Boolean
  readAt: String!
  updatedAt: String!
}

type Complaint {
  id: String!
  author: Recipient
  receiver: Recipient!
  status: ComplaintStatus!
  title: String!
  description: String!
  rating: Rating
  createdAt: String!
  updatedAt: String!
  replies: [ComplaintReply!]!
}

enum ComplaintDataType {
  SENT
  RESOLVED
  REVIEWED
  RECEIVED
}

type ComplaintData {
  id: String!
  ownerId: String!
  complaintId: String!
  occurredOn: String!
  dataType: ComplaintDataType!
}

type ComplaintsInfo {
  received: [ComplaintData]!
  resolved: [ComplaintData]!
  reviewed: [ComplaintData]!
  sent: [ComplaintData]!
}

type Industry {
  id: Int!
  name: String!
}

input CreateEnterprise {
  name: String!
  website: String!
  email: String!
  phoneNumber: String!
  countryId: Int!
  countryStateId: Int!
  cityId: Int!
  industryId: Int!
  foundationDate: String!
}

input CreateNewComplaint {
  authorId: String!
  receiverId: String!
}

input DescribeComplaint {
  complaintId: String!
  title: String!
  description: String!
}

input SendComplaint {
  complaintId: String!
  body: String!
}

type Employee {
  id: String!
  enterpriseId: String!
  userId: String!
  user: User!
  hiringDate: String!
  approvedHiring: Boolean!
  approvedHiringAt: String!
  enterprisePosition: String!
}

type Enterprise {
  id: String!
  name: String!
  logoImg: String!
  bannerImg: String!
  website: String!
  email: String!
  phoneNumber: String!
  address: Address!
  industry: String!
  foundationDate: String!
  ownerId: String!
  employees: [Employee]!
}

type EnterpriseByAuthenticatedUser {
  authority: GrantedAuthority!
  enterprise: Enterprise
}

type EnterprisesByAuthenticatedUserResult {
  enterprises: [EnterpriseByAuthenticatedUser!]!
  offices: [EnterpriseByAuthenticatedUser!]!
}

enum HiringProccessState {
  pending
  accepted
  rejected
  user_accepted
  canceled
  hired
  rated
  waiting
  fired
  leaved
}

type UsersForHiringResult {
  users: [User!]!
  count: Int!
  limit: Int!
  offset: Int!
  nextCursor: Int!
  prevCursor: Int!
}

input SearchWithPagination {
  id: String!
  limit: Int!
  offset: Int!
  query: String!
}

input CreateHiringInvitation {
  enterpriseId: String!
  proposedPosition: String!
  proposeTo: String!
}

type HiringInvitation {
  eventId: String!
  enterpriseId: String!
  proposedPosition: String!
  ownerId: String!
  fullName: String!
  enterpriseEmail: String!
  enterprisePhone: String!
  enterpriseLogoImg: String!
  occurredOn: String!
  seen: Boolean!
  status: HiringProccessState!
  reason: String!
}

type Query {
  userDescriptor: UserDescriptor!
  countries: [Country!]!
  countryStates(id: Int!): [CountryState!]!
  cities(id: Int!): [City!]!
  industries: [Industry!]!
  recipientsByNameLike(term: String!): [Recipient!]!
  complaintById(id: String!): Complaint!
  complaintsInfo(id: String!): ComplaintsInfo!
  complaintsByAuthorOrReceiverId(id: String!): [Complaint]!
  enterpriseByName(name: String!): Enterprise!
  enterprisesByAuthenticatedUser: EnterprisesByAuthenticatedUserResult!
  usersForHiring(input: SearchWithPagination!): UsersForHiringResult!
  userById(id: String!): User!
  hiringInvitationsByAuthenticatedUser: [HiringInvitation!]!
}

type Mutation {
  createUser(input: CreateUser!): User!
  createEnterprise(input: CreateEnterprise!): Enterprise!
  createNewComplaint(input: CreateNewComplaint!): Complaint!
  describeComplaint(input: DescribeComplaint!): Complaint!
  sendComplaint(input: SendComplaint!): Complaint!
}

type Subscription {
  notifications(id: String!): Notification!
  complaints(id: String!): Complaint!
}
